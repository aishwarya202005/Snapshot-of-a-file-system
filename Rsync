1) Once "a" has received the list of checksums of the blocks of B, 
	it must search A for any blocks at any offset that match the checksum of some block of B .

2) The basic strategy is to compute the 32-bit rolling checksum for a block of length S
starting at each byte of A in turn, and for each checksum, search the list for a match. 

3) To do this our implementation uses a simple 3 level searching scheme.
The first level uses a 16-bit hash of the 32-bit rolling checksum and a 2^16 entry hash table. The list of checksum values (i.e., the checksums from the blocks of B ) is sorted according to the 16-bit hash of the 32-bit rolling checksum. 

4) Each entry in the hash table points to the first element of the list for that hash value,
or contains a null value if no element of the list has that hash value.

5) At each offset in the file the 32-bit rolling checksum and its 16-bit hash are
calculated. If the hash table entry for that hash value is not a null value, the
second level check is invoked.

6) The second level check involves scanning the sorted checksum list starting
with the entry pointed to by the hash table entry, looking for an entry whose
32-bit rolling checksum matches the current value. The scan terminates when
it reaches an entry whose 16-bit hash differs. If this search ends a match, the
third level check is invoked.


=>rsync -avzh Downloads/ abra/
